<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何利用Hexo和GitHub搭建个人博客</title>
    <link href="/2024/09/20/hello-world/"/>
    <url>/2024/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-下载软件创建环境"><a href="#1-下载软件创建环境" class="headerlink" title="1. 下载软件创建环境"></a>1. 下载软件创建环境</h2><h3 id="1-1-安装-Git"><a href="#1-1-安装-Git" class="headerlink" title="1.1 安装 Git"></a>1.1 安装 Git</h3><h4 id="1-1-1-官网下载"><a href="#1-1-1-官网下载" class="headerlink" title="1.1.1 官网下载"></a>1.1.1 官网下载</h4><p>访问 <a href="https://git-scm.com/downloads">Git官网</a>，选择与系统对应的版本下载（64位版通常适用）。</p><p><em>图1</em></p><h4 id="1-1-2-检测是否安装成功"><a href="#1-1-2-检测是否安装成功" class="headerlink" title="1.1.2 检测是否安装成功"></a>1.1.2 检测是否安装成功</h4><p>安装完成后，打开命令行（Git Bash 或 cmd），运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>出现版本号即表示安装成功。</p><p><strong>小贴士：</strong></p><ul><li>在任意文件夹内右击空白处选择“Open Git Bash Here”打开 Git Bash。</li><li>如果没有该选项，可点击“更多选项”（Windows 11）。</li></ul><hr><h3 id="1-2-安装-Node-js"><a href="#1-2-安装-Node-js" class="headerlink" title="1.2 安装 Node.js"></a>1.2 安装 Node.js</h3><h4 id="1-2-1-官网下载"><a href="#1-2-1-官网下载" class="headerlink" title="1.2.1 官网下载"></a>1.2.1 官网下载</h4><p>访问 <a href="https://nodejs.cn/">Node.js 中文网</a>，选择长期支持版进行下载。</p><h4 id="1-2-2-检测是否安装成功"><a href="#1-2-2-检测是否安装成功" class="headerlink" title="1.2.2 检测是否安装成功"></a>1.2.2 检测是否安装成功</h4><p>运行以下命令，检查安装情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>出现版本号即表示安装成功。</p><hr><h3 id="1-3-安装与配置-Hexo"><a href="#1-3-安装与配置-Hexo" class="headerlink" title="1.3 安装与配置 Hexo"></a>1.3 安装与配置 Hexo</h3><h4 id="1-3-1-创建博客文件夹"><a href="#1-3-1-创建博客文件夹" class="headerlink" title="1.3.1 创建博客文件夹"></a>1.3.1 创建博客文件夹</h4><p>在电脑中创建一个文件夹（例如 <code>MyBlog</code>），用于存放博客项目，并在文件夹内右击空白处选择“Open Git Bash Here”打开 Git Bash。</p><h4 id="1-3-2-安装-Hexo"><a href="#1-3-2-安装-Hexo" class="headerlink" title="1.3.2 安装 Hexo"></a>1.3.2 安装 Hexo</h4><p>在命令行中运行以下命令安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h4 id="1-3-3-检测是否安装成功"><a href="#1-3-3-检测是否安装成功" class="headerlink" title="1.3.3 检测是否安装成功"></a>1.3.3 检测是否安装成功</h4><p>运行以下命令检查 Hexo 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo v<br></code></pre></td></tr></table></figure><p>出现版本号即表示安装成功。</p><h4 id="1-3-4-初始化博客项目"><a href="#1-3-4-初始化博客项目" class="headerlink" title="1.3.4 初始化博客项目"></a>1.3.4 初始化博客项目</h4><p>在刚创建的空博客文件夹中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><h4 id="1-3-5-生成项目静态文件"><a href="#1-3-5-生成项目静态文件" class="headerlink" title="1.3.5 生成项目静态文件"></a>1.3.5 生成项目静态文件</h4><p>使用以下命令生成博客的静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><h4 id="1-3-6-启动本地服务器"><a href="#1-3-6-启动本地服务器" class="headerlink" title="1.3.6 启动本地服务器"></a>1.3.6 启动本地服务器</h4><p>通过以下命令启动本地服务器查看博客内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>按住 Ctrl 键并点击链接可在默认浏览器中查看博客，按 Ctrl+C 停止服务器。</p><h4 id="1-3-7-在线访问博客"><a href="#1-3-7-在线访问博客" class="headerlink" title="1.3.7 在线访问博客"></a>1.3.7 在线访问博客</h4><p>通过 GitHub Pages 或其他平台进行部署。</p><hr><h2 id="2-使用-GitHub-提供的免费服务器"><a href="#2-使用-GitHub-提供的免费服务器" class="headerlink" title="2. 使用 GitHub 提供的免费服务器"></a>2. 使用 GitHub 提供的免费服务器</h2><h3 id="2-1-注册-GitHub-账号并创建仓库"><a href="#2-1-注册-GitHub-账号并创建仓库" class="headerlink" title="2.1 注册 GitHub 账号并创建仓库"></a>2.1 注册 GitHub 账号并创建仓库</h3><p>访问 <a href="https://github.com/">GitHub</a> 注册账号并创建仓库，仓库名格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;你的GitHub用户名&gt;.github.io<br></code></pre></td></tr></table></figure><p>例如，若用户名为 <code>hananhly</code>，则仓库名应为 <code>hananhly.github.io</code>。</p><p><em>图2</em></p><hr><h3 id="2-2-初始化-Git-的用户名和邮箱"><a href="#2-2-初始化-Git-的用户名和邮箱" class="headerlink" title="2.2 初始化 Git 的用户名和邮箱"></a>2.2 初始化 Git 的用户名和邮箱</h3><h4 id="2-2-1-设置用户名"><a href="#2-2-1-设置用户名" class="headerlink" title="2.2.1 设置用户名"></a>2.2.1 设置用户名</h4><p>运行以下命令设置 Git 用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-设置邮箱"><a href="#2-2-2-设置邮箱" class="headerlink" title="2.2.2 设置邮箱"></a>2.2.2 设置邮箱</h4><p>运行以下命令设置邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-检查配置是否成功"><a href="#2-2-3-检查配置是否成功" class="headerlink" title="2.2.3 检查配置是否成功"></a>2.2.3 检查配置是否成功</h4><p>运行以下命令检查用户名和邮箱配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name<br>git config --global user.email<br></code></pre></td></tr></table></figure><hr><h3 id="2-3-SSH-连接-GitHub"><a href="#2-3-SSH-连接-GitHub" class="headerlink" title="2.3 SSH 连接 GitHub"></a>2.3 SSH 连接 GitHub</h3><h4 id="2-3-1-安装-GitHub-部署插件"><a href="#2-3-1-安装-GitHub-部署插件" class="headerlink" title="2.3.1 安装 GitHub 部署插件"></a>2.3.1 安装 GitHub 部署插件</h4><p>运行以下命令安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="2-3-2-生成-SSH-密钥"><a href="#2-3-2-生成-SSH-密钥" class="headerlink" title="2.3.2 生成 SSH 密钥"></a>2.3.2 生成 SSH 密钥</h4><p>运行以下命令生成 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3-获取-SSH-公钥"><a href="#2-3-3-获取-SSH-公钥" class="headerlink" title="2.3.3 获取 SSH 公钥"></a>2.3.3 获取 SSH 公钥</h4><p>运行以下命令获取 SSH 公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制输出的密钥内容。</p><h4 id="2-3-4-在-GitHub-添加-SSH-公钥"><a href="#2-3-4-在-GitHub-添加-SSH-公钥" class="headerlink" title="2.3.4 在 GitHub 添加 SSH 公钥"></a>2.3.4 在 GitHub 添加 SSH 公钥</h4><p>在 GitHub <code>Settings</code> -&gt; <code>SSH and GPG keys</code>中，添加 SSH 密钥。</p><p><em>图4、图5</em></p><h4 id="2-3-5-验证-SSH-连接"><a href="#2-3-5-验证-SSH-连接" class="headerlink" title="2.3.5 验证 SSH 连接"></a>2.3.5 验证 SSH 连接</h4><p>运行以下命令验证连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现用户名即表示连接成功。</p><hr><h3 id="2-4-配置-Hexo-项目"><a href="#2-4-配置-Hexo-项目" class="headerlink" title="2.4 配置 Hexo 项目"></a>2.4 配置 Hexo 项目</h3><h4 id="2-4-1-修改-config-yml-文件"><a href="#2-4-1-修改-config-yml-文件" class="headerlink" title="2.4.1 修改 _config.yml 文件"></a>2.4.1 修改 <code>_config.yml</code> 文件</h4><p>在项目根目录下找到 <code>_config.yml</code> 文件，修改 <code>url</code> 为 GitHub Pages 的地址。</p><h4 id="2-4-2-配置-deploy-下的-repository"><a href="#2-4-2-配置-deploy-下的-repository" class="headerlink" title="2.4.2 配置 deploy 下的 repository"></a>2.4.2 配置 <code>deploy</code> 下的 <code>repository</code></h4><p>将 <code>repository</code> 配置为 GitHub 仓库地址。</p><p><strong>小贴士：</strong></p><ul><li>从新建仓库的 <code>settings</code> 下的 <code>Pages</code> 中找到 GitHub Pages 的地址。</li><li><code>_config.yml</code> 文件可以右键选择记事本直接修改。</li></ul><p><em>图6、图7</em></p><h4 id="2-4-3-部署更新"><a href="#2-4-3-部署更新" class="headerlink" title="2.4.3 部署更新"></a>2.4.3 部署更新</h4><p>每次更新本地文件后，运行以下命令：</p><ol><li><code>hexo clean</code></li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li></ol><p>至此，初始化的网站已经配置完毕，您可以通过 GitHub Pages 的地址访问。</p><p><strong>小贴士：</strong></p><ul><li>每次配置后都需运行以上三步。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
